<jboss-deployment-structure xmlns="urn:jboss:deployment-structure:1.2">
    <!-- Make sub deployments isolated by default, so they cannot see each others classes without a Class-Path entry -->
    <ear-subdeployments-isolated>false</ear-subdeployments-isolated>
    <!-- This corresponds to the top level deployment. For a war this is the war's module, for an ear -->
    <!-- This is the top level ear module, which contains all the classes in the EAR's lib folder     -->
    <deployment>
        <!-- exclude-subsystem prevents a subsystems deployment unit processors running on a deployment -->
        <!-- which gives basically the same effect as removing the subsystem, but it only affects single deployment -->
        <!--      <exclude-subsystems>
                  <subsystem name="resteasy" />
              </exclude-subsystems>
              &lt;!&ndash; Exclusions allow you to prevent the server from automatically adding some dependencies     &ndash;&gt;
              <exclusions>
                  <module name="org.javassist" />
              </exclusions>-->
        <!-- This allows you to define additional dependencies, it is the same as using the Dependencies: manifest attribute -->
        <dependencies>
            <module name="org.apache.commons.lang3" export="true"/>
        </dependencies>
        <!-- These add additional classes to the module. In this case it is the same as including the jar in the EAR's lib directory -->
        <!--        <resources>
                    <resource-root path="my-library.jar" />
                </resources>-->
    </deployment>
    <!--<sub-deployment name="web-1.0-SNAPSHOT.war" >-->
    <!--&lt;!&ndash;<sub-deployment name="web-${project.version}.war">&ndash;&gt;-->
        <!--<dependencies>-->
            <!--<module name="org.apache.commons.lang3"/>-->
        <!--</dependencies>-->
    <!--</sub-deployment>-->
     <!--<sub-deployment name="myapp.war" >-->
         <!--&lt;!&ndash; This corresponds to the module for a web deployment &ndash;&gt;-->
         <!--&lt;!&ndash; it can use all the same tags as the <deployment> entry above &ndash;&gt;-->
         <!--<dependencies>-->
             <!--&lt;!&ndash; Adds a dependency on a ejb jar. This could also be done with a Class-Path entry &ndash;&gt;-->
             <!--<module name="deployment.myear.ear.myejbjar.jar" optional="true" slot="main"/>-->
         <!--</dependencies>-->
         <!--&lt;!&ndash; Set's local resources to have the lowest priority &ndash;&gt;-->
         <!--&lt;!&ndash; If the same class is both in the sub deployment and in another sub deployment that &ndash;&gt;-->
         <!--&lt;!&ndash; is visible to the war, then the Class from the other deployment will be loaded,  &ndash;&gt;-->
         <!--&lt;!&ndash; rather than the class actually packaged in the war. &ndash;&gt;-->
         <!--&lt;!&ndash; This can be used to resolve ClassCastExceptions  if the same class is in multiple sub deployments&ndash;&gt;-->
         <!--<local-last value="true" />-->
     <!--</sub-deployment>-->

</jboss-deployment-structure>